/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidPrimaryQuantity: 'Invalid primary quantity.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPrimaryQuantityError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidPrimaryQuantity'
  constructor() {
    super('Invalid primary quantity.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPrimaryQuantityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidPrimaryQuantityError())
createErrorFromNameLookup.set(
  'InvalidPrimaryQuantity',
  () => new InvalidPrimaryQuantityError()
)

/**
 * InvalidFeePercentages: 'Seller fee basis points not equal to platform fee basis points creator fee basis points.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFeePercentagesError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'InvalidFeePercentages'
  constructor() {
    super(
      'Seller fee basis points not equal to platform fee basis points creator fee basis points.'
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFeePercentagesError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new InvalidFeePercentagesError())
createErrorFromNameLookup.set(
  'InvalidFeePercentages',
  () => new InvalidFeePercentagesError()
)

/**
 * InvalidCreators: 'Provided creator accounts do not match Metadata creators.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCreatorsError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidCreators'
  constructor() {
    super('Provided creator accounts do not match Metadata creators.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCreatorsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new InvalidCreatorsError())
createErrorFromNameLookup.set(
  'InvalidCreators',
  () => new InvalidCreatorsError()
)

/**
 * InactiveSemiFungible: 'Semi fungible has an inactive status.'
 *
 * @category Errors
 * @category generated
 */
export class InactiveSemiFungibleError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InactiveSemiFungible'
  constructor() {
    super('Semi fungible has an inactive status.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InactiveSemiFungibleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InactiveSemiFungibleError())
createErrorFromNameLookup.set(
  'InactiveSemiFungible',
  () => new InactiveSemiFungibleError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
