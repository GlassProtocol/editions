/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  TokenParameters,
  tokenParametersBeet,
} from '../accounts/TokenParameters'
import { DataV2, dataV2Beet } from '../types/DataV2'

/**
 * @category Instructions
 * @category CreateTokenParameters
 * @category generated
 */
export type CreateTokenParametersInstructionArgs = {
  tokenParametersData: TokenParameters
  metadataData: DataV2
  isMutable: boolean
}
/**
 * @category Instructions
 * @category CreateTokenParameters
 * @category generated
 */
export const createTokenParametersStruct = new beet.FixableBeetArgsStruct<
  CreateTokenParametersInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tokenParametersData', tokenParametersBeet],
    ['metadataData', dataV2Beet],
    ['isMutable', beet.bool],
  ],
  'CreateTokenParametersInstructionArgs'
)
/**
 * Accounts required by the _createTokenParameters_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] platformSigner
 * @property [_writable_, **signer**] mint
 * @property [_writable_] metadata
 * @property [] mintAuthority
 * @property [] metadataAuthority
 * @property [_writable_] tokenParameters
 * @property [_writable_] platform
 * @property [] platformSettings
 * @property [] metadataProgram
 * @category Instructions
 * @category CreateTokenParameters
 * @category generated
 */
export type CreateTokenParametersInstructionAccounts = {
  payer: web3.PublicKey
  platformSigner: web3.PublicKey
  mint: web3.PublicKey
  metadata: web3.PublicKey
  mintAuthority: web3.PublicKey
  metadataAuthority: web3.PublicKey
  tokenParameters: web3.PublicKey
  platform: web3.PublicKey
  platformSettings: web3.PublicKey
  metadataProgram: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const createTokenParametersInstructionDiscriminator = [
  138, 242, 46, 83, 221, 129, 90, 4,
]

/**
 * Creates a _CreateTokenParameters_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateTokenParameters
 * @category generated
 */
export function createCreateTokenParametersInstruction(
  accounts: CreateTokenParametersInstructionAccounts,
  args: CreateTokenParametersInstructionArgs,
  programId = new web3.PublicKey('hausS13jsjafwWwGqZTUQRmWyvyxn9EQpqMwV1PBBmk')
) {
  const [data] = createTokenParametersStruct.serialize({
    instructionDiscriminator: createTokenParametersInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.platformSigner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenParameters,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.platform,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.platformSettings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
