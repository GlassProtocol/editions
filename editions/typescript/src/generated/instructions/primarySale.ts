/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PrimarySale
 * @category generated
 */
export type PrimarySaleInstructionArgs = {
  numberOfSales: number
  saleQuantity: number
  overridePrimarySalePrice: beet.COption<beet.bignum>
  overridePrimarySaleTokenLimit: beet.COption<number>
}
/**
 * @category Instructions
 * @category PrimarySale
 * @category generated
 */
export const primarySaleStruct = new beet.FixableBeetArgsStruct<
  PrimarySaleInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['numberOfSales', beet.u32],
    ['saleQuantity', beet.u32],
    ['overridePrimarySalePrice', beet.coption(beet.u64)],
    ['overridePrimarySaleTokenLimit', beet.coption(beet.u32)],
  ],
  'PrimarySaleInstructionArgs'
)
/**
 * Accounts required by the _primarySale_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] platformSigner
 * @property [_writable_] mint
 * @property [_writable_] metadata
 * @property [] mintAuthority
 * @property [] tokenParameters
 * @property [_writable_] platform
 * @property [_writable_] platformSettings
 * @property [_writable_] tokenAccount
 * @property [_writable_] primaryReceipt
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category PrimarySale
 * @category generated
 */
export type PrimarySaleInstructionAccounts = {
  payer: web3.PublicKey
  platformSigner: web3.PublicKey
  mint: web3.PublicKey
  metadata: web3.PublicKey
  mintAuthority: web3.PublicKey
  tokenParameters: web3.PublicKey
  platform: web3.PublicKey
  platformSettings: web3.PublicKey
  tokenAccount: web3.PublicKey
  primaryReceipt: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const primarySaleInstructionDiscriminator = [
  183, 109, 237, 220, 232, 6, 182, 84,
]

/**
 * Creates a _PrimarySale_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PrimarySale
 * @category generated
 */
export function createPrimarySaleInstruction(
  accounts: PrimarySaleInstructionAccounts,
  args: PrimarySaleInstructionArgs,
  programId = new web3.PublicKey('GeTddTEvfE8My8HNbnSeS1o2tzyn9Z4S194tCUZPbQ8Y')
) {
  const [data] = primarySaleStruct.serialize({
    instructionDiscriminator: primarySaleInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.platformSigner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenParameters,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.platform,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.platformSettings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.primaryReceipt,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
